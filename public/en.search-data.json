{"/bigquery-utils/":{"data":{"":"","features#Features":"","next#Next":"üëã Welcome to the documentation of bigquery-advanced-utils!\nWhat is bigquery-advanced-utils? bigquery-advanced-utils is a Python package designed to enhance and extend Google‚Äôs official BigQuery client. It provides advanced features and utilities to tackle complex or uncommon challenges, helping developers avoid reinventing the wheel. As an open-source project, it is open to everyone and actively encourages contributions to make it more versatile and effective.\nFeatures Advanced Functionality - Solve complex BigQuery tasks with ease using specialized tools and utilities. Customizable and Extensible - Built for developers, the package supports flexible configurations and encourages contributions. Efficient Workflow - Save time with automated solutions for repetitive or challenging tasks. Open Source - Developed with transparency and collaboration in mind. Contributions are always welcome! Detailed Documentation - Easy-to-follow guides and examples to get you started quickly. Why Use bigquery-advanced-utils? This package enhances the standard BigQuery client by adding solutions for tasks that are not easily achievable with the base implementation. It reduces the effort required to handle complex scenarios, enabling developers to focus on solving business problems without being hindered by technical limitations.\nQuestions or Feedback? ‚ùì This project is maintained by Alessio Siciliano and is open to contributions. Have a question or feedback? Feel free to open an issue! Next Explore the following sections to get started:\nGetting StartedLearn how to use bigquery-advanced-utils in your projects","questions-or-feedback#Questions or Feedback?":"","what-is-bigquery-advanced-utils#What is \u003ccode\u003ebigquery-advanced-utils\u003c/code\u003e?":"","why-use-bigquery-advanced-utils#Why Use \u003ccode\u003ebigquery-advanced-utils\u003c/code\u003e?":""},"title":"BigQuery Advanced Utils"},"/bigquery-utils/getting_started/":{"data":{"":"","next#Next":"Quick Start Alessio-Siciliano/bigquery-advanced-utils\nYou can quickly get started by installing the package with pip:\npip install bigquery-advanced-utils Start as New Project Prerequisites Before starting, you need to have the following software installed:\nPython Git (optional) Steps Create a new virtual environment python -m venv venv Activate the new environment source venv/bin/activate # on macOS/Linux venv\\Scripts\\activate # on Windows Install the package Install the latest version available with the package manager PIP:\npip install bigquery-advanced-utils Import classes in your code Now, you can import all the classes from ‚Äúbigquery_advanced_utils‚Äù as:\nfrom bigquery_advanced_utils.bigquery import BigQueryClient How to update the package with the future versions? To update the package in your project to its latest versions, run the following command:\npip install --upgrade bigquery-advanced-utils Next Explore the following sections for more information about the package:\nOrganize Files\rConfiguration\rMarkdown","quick-start#Quick Start":"","start-as-new-project#Start as New Project":""},"title":"Getting Started"},"/bigquery-utils/modules/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files\rConfiguration\rMarkdown\rSyntax Highlighting\rLaTeX\rDiagrams\rShortcodes\rDeploy Site"},"title":"Modules"},"/bigquery-utils/modules/bigquery/":{"data":{"":"","class-initialization#Class Initialization":"","introduction#Introduction":"","methods-overview#Methods Overview":"Introduction The BigQueryClient class is a custom extension of the Google Cloud BigQuery Client. This enhanced client provides additional functionality for managing BigQuery operations more efficiently. It includes built-in methods for managing permissions, handling datasets and tables, and automating common tasks such as loading data, exporting tables, and simulating queries.\nClass Initialization This constructor initializes the BigQueryClient class, which inherits from the google.cloud.bigquery.Client. It shares the attributes and behavior of the original BigQuery client while enabling customized extensions for easier BigQuery operations.\nParameters project_id (str): The project ID associated with the BigQuery client. credentials (Optional[Credentials]): The credentials used to authenticate the client. _http (Optional[requests.Session]): The HTTP session to use for requests. location (Optional[str]): Default geographic location for queries and jobs. default_query_job_config (Optional[QueryJobConfig]): Default configuration for query jobs. default_load_job_config (Optional[LoadJobConfig]): Default configuration for load jobs. client_info (Optional[ClientInfo]): Information about the client. client_options (Optional[Union[ClientOptions, Dict]]): Additional client options. Example BigQueryClient( project_id: str, credentials: Optional[Credentials] = None, _http: Optional[requests.Session] = None, location: Optional[str] = None, default_query_job_config: Optional[QueryJobConfig] = None, default_load_job_config: Optional[LoadJobConfig] = None, client_info: Optional[ClientInfo] = None, client_options: Optional[Union[ClientOptions, Dict]] = None, ) Methods Overview check_table_existence Description Checks whether a specific table exists within a given dataset.\nParameters dataset_id (str): The ID of the dataset to check. table_id (str): The ID of the table to check. Example exists = client.check_table_existence(\"my_dataset\", \"my_table\") print(f\"Table exists: {exists}\") load_data_from_csv Description Loads data from a CSV file into a specified BigQuery table. Optionally applies validation tests (custom or not) to the data.\nParameters dataset_id (str): The destination dataset ID. table_id (str): The destination table ID. csv_file_path (str): Path to the CSV file. test_functions (Optional[list]): A list of validation functions applied to the data. For the full list of predefined test (See the Custom checks class page for more details.) encoding (str): The file encoding (default is UTF-8). Example from functools import partial def custom_test(index, row, header, column_sums): if len(row) != len(header): raise ValueError(f\"Row {index} does not match header length.\") data_checks = CustomDataChecks() client.load_data_from_csv( dataset_id=\"my_dataset\", table_id=\"my_table\", csv_file_path=\"data.csv\", test_functions=[ custom_test, partial(data_checks.check_columns), partial( data_checks.check_unique, columns_to_test=[\"col1\"], ), ... ] ) simulate_query Description Simulates a query execution to estimate resource usage and provides metadata such as schema and referenced tables.\nParameters query (str): The SQL query to simulate. Returns dict: Metadata about the query execution, including schema, referenced tables, and bytes processed. Example simulation = client.simulate_query(\"SELECT * FROM `my_project.my_dataset.my_table` LIMIT 10\") print(simulation) grant_permission Description Manages permissions (add, remove, or update) for users on a BigQuery table or dataset.\nParameters resource_id (str): The resource ID in the format project_id.dataset_id (if dataset) or project_id.dataset_id.table_id (if table). user_permissions (List[Dict[str, str]]): A list of dictionaries containing user_email and role. action (str): The action to perform (add, remove, or update). Example permissions = [ {\"user_email\": \"user@example.com\", \"role\": \"READER\"}, {\"user_email\": \"admin@example.com\", \"role\": \"OWNER\"} ] client.grant_permission( resource_id=\"my_project.my_dataset\", user_permissions=permissions, action=\"add\" ) export_table Description Exports a BigQuery table to a specified format (e.g., CSV, JSON) to Cloud Storage.\nParameters dataset_id (str): The ID of the dataset. table_id (str): The ID of the table. destination (str): The destination path (e.g., gs://bucket_name/file). output_file_format (OutputFileFormat): The format of the exported file (CSV, JSON, or AVRO). compression (Literal): Compression type (GZIP, DEFLATE, SNAPPY, or NONE). Example client.export_table( dataset_id=\"my_dataset\", table_id=\"my_table\", destination=\"gs://my_bucket/my_table.csv\", output_file_format=\"CSV\", compression=\"GZIP\" ) "},"title":"Bigquery"},"/bigquery-utils/modules/datatransfer/":{"data":{"":"","class-initialization#Class Initialization":"","introduction#Introduction":"","methods-overview#Methods Overview":"Introduction This module provides a custom implementation of the DataTransferServiceClient to extend its functionality. It allows advanced querying of scheduled transfers in BigQuery, adding features like caching and filtering by owner email or table.\nClass Initialization The DataTransferClient extends the original Google Cloud DataTransferServiceClient to provide additional utility methods for managing scheduled queries in BigQuery. The enhancements include caching, advanced filtering, and integration with string utilities.\nParameters credentials (str): The user‚Äôs credentials for authentication. client_options (Optional): A dictionary of custom client settings. Example DataTransferClient( credentials: Optional[Credentials] = None, client_options: Optional[Union[ClientOptions, Dict]] = None, def __init__(self, credentials: Optional[Credentials] = None, client_options: Optional[dict] = None) -\u003e None ) Methods Overview list_transfer_configs Description Retrieves all scheduled queries in a project. Optionally, fetches the email of the owner for each transfer configuration.\nParameters dataset_id (str): The ID of the dataset to check. table_id (str): The ID of the table to check. request Optional: A ListTransferConfigsRequest object or equivalent dictionary. parent Optional: The project and location in the format projects/{project_id}/locations/{location_id}. retry Optional: Retry configuration for handling errors. timeout Optional: Timeout for the request. metadata Optional: Additional metadata for the request. with_email Optional: Whether to fetch the email of the transfer config owner (default is False). Example configs = client.list_transfer_configs(parent=\"projects/my-project/locations/my-location\") list_transfer_config_by_owner_email Description Filters transfer configurations by the email of the owner.\nParameters owner_email: The email of the owner to filter by. parent: The project and location in the format projects/{project_id}/locations/{location_id}. Example configs = client.list_transfer_config_by_owner_email( owner_email=\"user@example.com\", parent=\"projects/my-project/locations/us\" ) list_transfer_configs_by_table Description Filters transfer configurations by the table referenced in their queries.\nParameters table_id (str): The name of the table to filter by (not the full path). Returns parent: The project and location in the format projects/{project_id}/locations/{location_id}. Example configs = client.list_transfer_configs_by_table( table_id=\"my_table\", parent=\"projects/my-project/locations/us\" ) "},"title":"Datatransfer"},"/blog/":{"data":{"":"\rRSS Feed "},"title":"Blog"},"/blog/reset-git-history/":{"data":{"":"","benefits-of-resetting-a-repository#Benefits of Resetting a Repository":"Learn how to reset your Git repository by creating a new main branch with no previous history. This step-by-step guide walks you through creating an orphan branch, removing the old main branch, and force-updating your remote repository.\nIntroduction When working with Git, there might be times when you want to reset your repository completely, erasing its history and starting over with a clean slate. This tutorial will guide you through the process of creating a new main branch and replacing the old one, effectively resetting your repository.\nThis process is destructive and will permanently delete the history of your repository, so proceed with caution and make backups if needed.\nWhy reset a Repository? Start Fresh: Begin with a clean history for a new phase of development. Reduce Repository Size: Remove unnecessary historical data. Fix Mistakes: Eliminate sensitive information or erroneous commits. Simplify History: Clean up a messy commit history for easier navigation. Steps to Reset a Git Repository Follow these steps to reset your repository:\nCreate an Orphan Branch An orphan branch is not connected to any previous commits in the repository.\ngit checkout --orphan latest_branch This creates a new branch named latest_branch with no history.\nAdd All Files You need to stage all files for the initial commit in the orphan branch.\ngit add -A This command stages all files, including new and modified ones.\nCommit the Changes Create a new commit in the orphan branch.\ngit commit -am \"Initial commit for the new main branch\" This becomes the first commit in your new branch.\nDelete the Old Main Branch Once the orphan branch is ready, delete the old main branch.\ngit branch -D main ‚ö†Ô∏è Warning: This action is permanent and cannot be undone.\nRename the New Branch to Main Rename the orphan branch to main to make it the primary branch.\ngit branch -m main Force Push to Update the Remote Repository To apply the changes to the remote repository, you must force push the new branch.\ngit push -f origin main The -f (force) option is required because you are replacing the existing remote history.\nImportant Notes Destructive Operation: Resetting the repository will permanently delete all previous commits. Make backups if necessary. Collaborators: Inform collaborators beforehand, as their local copies will no longer match the remote. They will need to re-clone the repository after this process. Use Cases: Only use this process when absolutely necessary, such as removing sensitive data, cleaning up large repositories, or starting a fresh phase of a project. Benefits of Resetting a Repository Reduced Complexity: A cleaner history for easier navigation and understanding. Optimized Size: Removes unnecessary files and commits, reducing repository size. Security: Eliminates sensitive or private information from version history. With this process, you can start fresh with a brand-new main branch while eliminating the previous history. This is a powerful Git feature but should be used carefully due to its irreversible nature.","important-notes#Important Notes":"","introduction#Introduction":"","steps-to-reset-a-git-repository#Steps to Reset a Git Repository":"","why-reset-a-repository#Why reset a Repository?":""},"title":"How to Completely Reset a Git Repository: Starting Fresh with a New Main Branch"}}
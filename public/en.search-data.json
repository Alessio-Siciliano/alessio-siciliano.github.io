{"/bigquery-utils/":{"data":{"":"","features#Features":"","next#Next":"üëã Welcome to the documentation of bigquery-advanced-utils!\nWhat is bigquery-advanced-utils? bigquery-advanced-utils is a Python package designed to enhance and extend Google‚Äôs official BigQuery client. It provides advanced features and utilities to tackle complex or uncommon challenges, helping developers avoid reinventing the wheel. As an open-source project, it is open to everyone and actively encourages contributions to make it more versatile and effective.\nFeatures Advanced Functionality - Solve complex BigQuery tasks with ease using specialized tools and utilities. Customizable and Extensible - Built for developers, the package supports flexible configurations and encourages contributions. Efficient Workflow - Save time with automated solutions for repetitive or challenging tasks. Open Source - Developed with transparency and collaboration in mind. Contributions are always welcome! Detailed Documentation - Easy-to-follow guides and examples to get you started quickly. Why Use bigquery-advanced-utils? This package enhances the standard BigQuery client by adding solutions for tasks that are not easily achievable with the base implementation. It reduces the effort required to handle complex scenarios, enabling developers to focus on solving business problems without being hindered by technical limitations.\nQuestions or Feedback? ‚ùì This project is maintained by Alessio Siciliano and is open to contributions. Have a question or feedback? Feel free to open an issue! Next Explore the following sections to get started:\nGetting StartedLearn how to use bigquery-advanced-utils in your projects","questions-or-feedback#Questions or Feedback?":"","what-is-bigquery-advanced-utils#What is \u003ccode\u003ebigquery-advanced-utils\u003c/code\u003e?":"","why-use-bigquery-advanced-utils#Why Use \u003ccode\u003ebigquery-advanced-utils\u003c/code\u003e?":""},"title":"BigQuery Advanced Utils"},"/bigquery-utils/getting_started/":{"data":{"":"","next#Next":"Quick Start Alessio-Siciliano/bigquery-advanced-utils\nYou can quickly get started by installing the package with pip:\npip install bigquery-advanced-utils Start as New Project Prerequisites Before starting, you need to have the following software installed:\nPython Git (optional) Steps Create a new virtual environment python -m venv venv Activate the new environment source venv/bin/activate # on macOS/Linux venv\\Scripts\\activate # on Windows Install the package Install the latest version available with the package manager PIP:\npip install bigquery-advanced-utils Import classes in your code Now, you can import all the classes from ‚Äúbigquery_advanced_utils‚Äù as:\nfrom bigquery_advanced_utils.bigquery import BigQueryClient How to update the package with the future versions? To update the package in your project to its latest versions, run the following command:\npip install --upgrade bigquery-advanced-utils Next Explore the following sections for more information about the package:\nOrganize Files\rConfiguration\rMarkdown","quick-start#Quick Start":"","start-as-new-project#Start as New Project":""},"title":"Getting Started"},"/bigquery-utils/modules/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files\rConfiguration\rMarkdown\rSyntax Highlighting\rLaTeX\rDiagrams\rShortcodes\rDeploy Site"},"title":"Modules"},"/bigquery-utils/modules/bigquery/":{"data":{"":"","class-initialization#Class Initialization":"","introduction#Introduction":"","methods-overview#Methods Overview":"Introduction The BigQueryClient class is a custom extension of the Google Cloud BigQuery Client. This enhanced client provides additional functionality for managing BigQuery operations more efficiently. It includes built-in methods for managing permissions, handling datasets and tables, and automating common tasks such as loading data, exporting tables, and simulating queries.\nClass Initialization This constructor initializes the BigQueryClient class, which inherits from the google.cloud.bigquery.Client. It shares the attributes and behavior of the original BigQuery client while enabling customized extensions for easier BigQuery operations.\nParameters project_id (str): The project ID associated with the BigQuery client. credentials (Optional[Credentials]): The credentials used to authenticate the client. _http (Optional[requests.Session]): The HTTP session to use for requests. location (Optional[str]): Default geographic location for queries and jobs. default_query_job_config (Optional[QueryJobConfig]): Default configuration for query jobs. default_load_job_config (Optional[LoadJobConfig]): Default configuration for load jobs. client_info (Optional[ClientInfo]): Information about the client. client_options (Optional[Union[ClientOptions, Dict]]): Additional client options. Example BigQueryClient( project_id: str, credentials: Optional[Credentials] = None, _http: Optional[requests.Session] = None, location: Optional[str] = None, default_query_job_config: Optional[QueryJobConfig] = None, default_load_job_config: Optional[LoadJobConfig] = None, client_info: Optional[ClientInfo] = None, client_options: Optional[Union[ClientOptions, Dict]] = None, ) Methods Overview check_table_existence Description Checks whether a specific table exists within a given dataset.\nParameters dataset_id (str): The ID of the dataset to check. table_id (str): The ID of the table to check. Example exists = client.check_table_existence(\"my_dataset\", \"my_table\") print(f\"Table exists: {exists}\") load_data_from_csv Description Loads data from a CSV file into a specified BigQuery table. Optionally applies validation tests (custom or not) to the data.\nParameters dataset_id (str): The destination dataset ID. table_id (str): The destination table ID. csv_file_path (str): Path to the CSV file. test_functions (Optional[list]): A list of validation functions applied to the data. For the full list of predefined test (See the Custom checks class page for more details.) encoding (str): The file encoding (default is UTF-8). Example from functools import partial def custom_test(index, row, header, column_sums): if len(row) != len(header): raise ValueError(f\"Row {index} does not match header length.\") data_checks = CustomDataChecks() client.load_data_from_csv( dataset_id=\"my_dataset\", table_id=\"my_table\", csv_file_path=\"data.csv\", test_functions=[ custom_test, partial(data_checks.check_columns), partial( data_checks.check_unique, columns_to_test=[\"col1\"], ), ... ] ) simulate_query Description Simulates a query execution to estimate resource usage and provides metadata such as schema and referenced tables.\nParameters query (str): The SQL query to simulate. Returns dict: Metadata about the query execution, including schema, referenced tables, and bytes processed. Example simulation = client.simulate_query(\"SELECT * FROM `my_project.my_dataset.my_table` LIMIT 10\") print(simulation) grant_permission Description Manages permissions (add, remove, or update) for users on a BigQuery table or dataset.\nParameters resource_id (str): The resource ID in the format project_id.dataset_id (if dataset) or project_id.dataset_id.table_id (if table). user_permissions (List[Dict[str, str]]): A list of dictionaries containing user_email and role. action (str): The action to perform (add, remove, or update). Example permissions = [ {\"user_email\": \"user@example.com\", \"role\": \"READER\"}, {\"user_email\": \"admin@example.com\", \"role\": \"OWNER\"} ] client.grant_permission( resource_id=\"my_project.my_dataset\", user_permissions=permissions, action=\"add\" ) export_table Description Exports a BigQuery table to a specified format (e.g., CSV, JSON) to Cloud Storage.\nParameters dataset_id (str): The ID of the dataset. table_id (str): The ID of the table. destination (str): The destination path (e.g., gs://bucket_name/file). output_file_format (OutputFileFormat): The format of the exported file (CSV, JSON, or AVRO). compression (Literal): Compression type (GZIP, DEFLATE, SNAPPY, or NONE). Example client.export_table( dataset_id=\"my_dataset\", table_id=\"my_table\", destination=\"gs://my_bucket/my_table.csv\", output_file_format=\"CSV\", compression=\"GZIP\" ) "},"title":"Bigquery"},"/bigquery-utils/modules/datatransfer/":{"data":{"":"","footer#Footer":"","navigation#Navigation":"","others#Others":"Hugo reads its configuration from hugo.yaml in the root of your Hugo site. The config file is where you can configure all aspects of your site. Check out the config file for this site exampleSite/hugo.yaml on GitHub to get a comprehensive idea of available settings and best practices.\nNavigation Menu Top right menu is defined under the menu.main section in the config file:\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github There are different types of menu items:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github These menu items can be sorted by setting the weight parameter.\nLogo and Title To modify the default logo, edit hugo.yaml and add the path to your logo file under static directory. Optionally, you can change the link that users are redirected to when clicking on your logo, as well as set the width \u0026 height of the logo in pixels.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 Sidebar Main Sidebar For the main sidebar, it is automatically generated from the structure of the content directory. See the Organize Files page for more details.\nTo exclude a single page from the left sidebar, set the sidebar.exclude parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration sidebar: exclude: true --- Extra Links Sidebar extra links are defined under the menu.sidebar section in the config file:\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ‚Üó\" url: \"https://gohugo.io/documentation/\" weight: 3 Right Sidebar Table of Contents Table of contents is automatically generated from the headings in the content file. It can be disabled by setting toc: false in the front matter of the page.\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- Page Edit Link To configure the page edit link, we can set the params.editURL.base parameter in the config file:\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" The edit links will be automatically generated for each page based on the provided url as root directory. If you want to set edit link for a specific page, you can set the editURL parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration editURL: \"https://example.com/edit/this/page\" --- Footer Copyright To modify the copyright text displayed in your website‚Äôs footer, you‚Äôll need to create a file named i18n/en.yaml. In this file, specify your new copyright text as shown below:\ni18n/en.yamlcopyright: \"¬© 2024 YOUR TEXT HERE\" For your reference, an example i18n/en.yaml file can be found in the GitHub repository. Additionally, you could use Markdown format in the copyright text.\nOthers Favicon To customize the favicon for your site, place icon files under the static folder to override the default favicons from the theme:\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest Include favicon.ico, favicon.svg and favicon-dark.svg files in your project to ensure your site‚Äôs favicons display correctly.\nWhile favicon.ico is generally for older browsers, favicon.svg and favicon-dark.svg are supported by modern browsers. Use tools like favicon.io or favycon to generate such icons.\nTheme Configuration Use the theme setting to configure the default theme mode and toggle button, allowing visitors to switch between light or dark mode.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true Options for theme.default:\nlight - always use light mode dark - always use dark mode system - sync with the operating system setting (default) The theme.displayToggle parameter allows you to display a toggle button for changing themes. When set to true, visitors can switch between light or dark mode, overriding the default setting.\nPage Width The width of the page can be customized by the params.page.width parameter in the config file:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide There are three available options: full, wide, and normal. By default, the page width is set to normal.\nSimilarly, the width of the navbar and footer can be customized by the params.navbar.width and params.footer.width parameters.\nSearch Index Full-text search powered by FlexSearch is enabled by default. To customize the search index, set the params.search.flexsearch.index parameter in the config file:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content Options for flexsearch.index:\ncontent - full content of the page (default) summary - summary of the page, see Hugo Content Summaries for more details heading - level 1 and level 2 headings title - only include the page title To customize the search tokenize, set the params.search.flexsearch.tokenize parameter in the config file:\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward Options for flexsearch.tokenize:\nstrict - index whole words forward - incrementally index words in forward direction reverse - incrementally index words in both directions full - index every possible combination To exclude a page from the search index, set the excludeSearch: true in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics To enable Google Analytics, set services.googleAnalytics.ID flag in hugo.yaml:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","right-sidebar#Right Sidebar":"","sidebar#Sidebar":""},"title":"Datatransfer"}}